// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`generateRepositories > should generate repositories (posts) 1`] = `
"import { isArray } from "@tsed/core";
import { deserialize } from "@tsed/json-mapper";
import { Injectable, Inject } from "@tsed/di";
import { PrismaService } from "../services/PrismaService";
import { Prisma, Post } from "../client/index";
import { PostModel } from "../models/index";

@Injectable()
export class PostsRepository {
  @Inject()
  protected prisma: PrismaService;

  get collection() {
    return this.prisma.post
  }

  get groupBy() {
    return this.collection.groupBy.bind(this.collection)
  }

  protected deserialize<T>(obj: null | Post | Post[]): T {
    return deserialize<T>(obj, { type: PostModel, collectionType: isArray(obj) ? Array : undefined })
  }

  async findUnique(args: Prisma.PostFindUniqueArgs): Promise<PostModel | null> {
    const obj = await this.collection.findUnique(args);
    return this.deserialize<PostModel | null>(obj);
  }

  async findFirst(args: Prisma.PostFindFirstArgs): Promise<PostModel | null> {
    const obj = await this.collection.findFirst(args);
    return this.deserialize<PostModel | null>(obj);
  }

  async findMany(args?: Prisma.PostFindManyArgs): Promise<PostModel[]> {
    const obj = await this.collection.findMany(args);
    return this.deserialize<PostModel[]>(obj);
  }

  async create(args: Prisma.PostCreateArgs): Promise<PostModel> {
    const obj = await this.collection.create(args);
    return this.deserialize<PostModel>(obj);
  }

  async update(args: Prisma.PostUpdateArgs): Promise<PostModel> {
    const obj = await this.collection.update(args);
    return this.deserialize<PostModel>(obj);
  }

  async upsert(args: Prisma.PostUpsertArgs): Promise<PostModel> {
    const obj = await this.collection.upsert(args);
    return this.deserialize<PostModel>(obj);
  }

  async delete(args: Prisma.PostDeleteArgs): Promise<PostModel> {
    const obj = await this.collection.delete(args);
    return this.deserialize<PostModel>(obj);
  }

  deleteMany(args: Prisma.PostDeleteManyArgs) {
    return this.collection.deleteMany(args)
  }

  updateMany(args: Prisma.PostUpdateManyArgs) {
    return this.collection.updateMany(args)
  }

  aggregate(args: Prisma.PostAggregateArgs) {
    return this.collection.aggregate(args)
  }
}
"
`;

exports[`generateRepositories > should generate repositories (user) 1`] = `
"import { isArray } from "@tsed/core";
import { deserialize } from "@tsed/json-mapper";
import { Injectable, Inject } from "@tsed/di";
import { PrismaService } from "../services/PrismaService";
import { Prisma, User } from "../client/index";
import { UserModel } from "../models/index";

@Injectable()
export class UsersRepository {
  @Inject()
  protected prisma: PrismaService;

  get collection() {
    return this.prisma.user
  }

  get groupBy() {
    return this.collection.groupBy.bind(this.collection)
  }

  protected deserialize<T>(obj: null | User | User[]): T {
    return deserialize<T>(obj, { type: UserModel, collectionType: isArray(obj) ? Array : undefined })
  }

  async findUnique(args: Prisma.UserFindUniqueArgs): Promise<UserModel | null> {
    const obj = await this.collection.findUnique(args);
    return this.deserialize<UserModel | null>(obj);
  }

  async findFirst(args: Prisma.UserFindFirstArgs): Promise<UserModel | null> {
    const obj = await this.collection.findFirst(args);
    return this.deserialize<UserModel | null>(obj);
  }

  async findMany(args?: Prisma.UserFindManyArgs): Promise<UserModel[]> {
    const obj = await this.collection.findMany(args);
    return this.deserialize<UserModel[]>(obj);
  }

  async create(args: Prisma.UserCreateArgs): Promise<UserModel> {
    const obj = await this.collection.create(args);
    return this.deserialize<UserModel>(obj);
  }

  async update(args: Prisma.UserUpdateArgs): Promise<UserModel> {
    const obj = await this.collection.update(args);
    return this.deserialize<UserModel>(obj);
  }

  async upsert(args: Prisma.UserUpsertArgs): Promise<UserModel> {
    const obj = await this.collection.upsert(args);
    return this.deserialize<UserModel>(obj);
  }

  async delete(args: Prisma.UserDeleteArgs): Promise<UserModel> {
    const obj = await this.collection.delete(args);
    return this.deserialize<UserModel>(obj);
  }

  deleteMany(args: Prisma.UserDeleteManyArgs) {
    return this.collection.deleteMany(args)
  }

  updateMany(args: Prisma.UserUpdateManyArgs) {
    return this.collection.updateMany(args)
  }

  aggregate(args: Prisma.UserAggregateArgs) {
    return this.collection.aggregate(args)
  }
}
"
`;

exports[`generateRepositories should generate repositories (posts) 1`] = `
"import { isArray } from \\"@tsed/core\\";
import { deserialize } from \\"@tsed/json-mapper\\";
import { Injectable, Inject } from \\"@tsed/di\\";
import { PrismaService } from \\"../services/PrismaService\\";
import { Prisma, Post } from \\"../client/index\\";
import { PostModel } from \\"../models/index\\";

@Injectable()
export class PostsRepository {
  @Inject()
  protected prisma: PrismaService;

  get collection() {
    return this.prisma.post
  }

  get groupBy() {
    return this.collection.groupBy.bind(this.collection)
  }

  protected deserialize<T>(obj: null | Post | Post[]): T {
    return deserialize<T>(obj, { type: PostModel, collectionType: isArray(obj) ? Array : undefined })
  }

  async findUnique(args: Prisma.PostFindUniqueArgs): Promise<PostModel | null> {
    const obj = await this.collection.findUnique(args);
    return this.deserialize<PostModel | null>(obj);
  }

  async findFirst(args: Prisma.PostFindFirstArgs): Promise<PostModel | null> {
    const obj = await this.collection.findFirst(args);
    return this.deserialize<PostModel | null>(obj);
  }

  async findMany(args?: Prisma.PostFindManyArgs): Promise<PostModel[]> {
    const obj = await this.collection.findMany(args);
    return this.deserialize<PostModel[]>(obj);
  }

  async create(args: Prisma.PostCreateArgs): Promise<PostModel> {
    const obj = await this.collection.create(args);
    return this.deserialize<PostModel>(obj);
  }

  async update(args: Prisma.PostUpdateArgs): Promise<PostModel> {
    const obj = await this.collection.update(args);
    return this.deserialize<PostModel>(obj);
  }

  async upsert(args: Prisma.PostUpsertArgs): Promise<PostModel> {
    const obj = await this.collection.upsert(args);
    return this.deserialize<PostModel>(obj);
  }

  async delete(args: Prisma.PostDeleteArgs): Promise<PostModel> {
    const obj = await this.collection.delete(args);
    return this.deserialize<PostModel>(obj);
  }

  deleteMany(args: Prisma.PostDeleteManyArgs) {
    return this.collection.deleteMany(args)
  }

  updateMany(args: Prisma.PostUpdateManyArgs) {
    return this.collection.updateMany(args)
  }

  aggregate(args: Prisma.PostAggregateArgs) {
    return this.collection.aggregate(args)
  }
}
"
`;

exports[`generateRepositories should generate repositories (user) 1`] = `
"import { isArray } from \\"@tsed/core\\";
import { deserialize } from \\"@tsed/json-mapper\\";
import { Injectable, Inject } from \\"@tsed/di\\";
import { PrismaService } from \\"../services/PrismaService\\";
import { Prisma, User } from \\"../client/index\\";
import { UserModel } from \\"../models/index\\";

@Injectable()
export class UsersRepository {
  @Inject()
  protected prisma: PrismaService;

  get collection() {
    return this.prisma.user
  }

  get groupBy() {
    return this.collection.groupBy.bind(this.collection)
  }

  protected deserialize<T>(obj: null | User | User[]): T {
    return deserialize<T>(obj, { type: UserModel, collectionType: isArray(obj) ? Array : undefined })
  }

  async findUnique(args: Prisma.UserFindUniqueArgs): Promise<UserModel | null> {
    const obj = await this.collection.findUnique(args);
    return this.deserialize<UserModel | null>(obj);
  }

  async findFirst(args: Prisma.UserFindFirstArgs): Promise<UserModel | null> {
    const obj = await this.collection.findFirst(args);
    return this.deserialize<UserModel | null>(obj);
  }

  async findMany(args?: Prisma.UserFindManyArgs): Promise<UserModel[]> {
    const obj = await this.collection.findMany(args);
    return this.deserialize<UserModel[]>(obj);
  }

  async create(args: Prisma.UserCreateArgs): Promise<UserModel> {
    const obj = await this.collection.create(args);
    return this.deserialize<UserModel>(obj);
  }

  async update(args: Prisma.UserUpdateArgs): Promise<UserModel> {
    const obj = await this.collection.update(args);
    return this.deserialize<UserModel>(obj);
  }

  async upsert(args: Prisma.UserUpsertArgs): Promise<UserModel> {
    const obj = await this.collection.upsert(args);
    return this.deserialize<UserModel>(obj);
  }

  async delete(args: Prisma.UserDeleteArgs): Promise<UserModel> {
    const obj = await this.collection.delete(args);
    return this.deserialize<UserModel>(obj);
  }

  deleteMany(args: Prisma.UserDeleteManyArgs) {
    return this.collection.deleteMany(args)
  }

  updateMany(args: Prisma.UserUpdateManyArgs) {
    return this.collection.updateMany(args)
  }

  aggregate(args: Prisma.UserAggregateArgs) {
    return this.collection.aggregate(args)
  }
}
"
`;
