// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Integration: BodyParams any > should generate the right spec (File) 1`] = `
{
  "components": {
    "schemas": {
      "BadRequest": {
        "properties": {
          "errors": {
            "description": "A list of related errors",
            "items": {
              "$ref": "#/components/schemas/GenericError",
            },
            "type": "array",
          },
          "message": {
            "description": "An error message",
            "minLength": 1,
            "type": "string",
          },
          "name": {
            "default": "BAD_REQUEST",
            "description": "The error name",
            "example": "BAD_REQUEST",
            "minLength": 1,
            "type": "string",
          },
          "stack": {
            "description": "The stack trace (only in development mode)",
            "type": "string",
          },
          "status": {
            "default": 400,
            "description": "The status code of the exception",
            "example": 400,
            "type": "number",
          },
        },
        "required": [
          "name",
          "message",
          "status",
        ],
        "type": "object",
      },
      "GenericError": {
        "additionalProperties": true,
        "properties": {
          "message": {
            "description": "An error message",
            "minLength": 1,
            "type": "string",
          },
          "name": {
            "description": "The error name",
            "minLength": 1,
            "type": "string",
          },
        },
        "required": [
          "name",
          "message",
        ],
        "type": "object",
      },
    },
  },
  "paths": {
    "/array": {
      "post": {
        "operationId": "testArrayBodyCtrlTest",
        "parameters": [],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "file1": {
                    "items": {
                      "format": "binary",
                      "type": "string",
                    },
                    "type": "array",
                  },
                },
                "type": "object",
              },
            },
          },
          "required": false,
        },
        "responses": {
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest",
                },
              },
            },
            "description": "<File too long | Too many parts | Too many files | Field name too long | Field value too long | Too many fields | Unexpected field>  [fieldName] Example: File too long file1",
          },
        },
        "tags": [
          "TestArrayBodyCtrl",
        ],
      },
    },
  },
  "tags": [
    {
      "name": "TestArrayBodyCtrl",
    },
  ],
}
`;

exports[`Integration: BodyParams any > should generate the right spec (MyModel[]) 1`] = `
{
  "components": {
    "schemas": {
      "MyModel": {
        "properties": {
          "test": {
            "type": "string",
          },
        },
        "type": "object",
      },
    },
  },
  "paths": {
    "/array/1": {
      "post": {
        "operationId": "testArrayBodyCtrlScenario1",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/MyModel",
                },
                "type": "array",
              },
            },
          },
          "required": false,
        },
        "responses": {
          "200": {
            "description": "Success",
          },
        },
        "tags": [
          "TestArrayBodyCtrl",
        ],
      },
    },
  },
  "tags": [
    {
      "name": "TestArrayBodyCtrl",
    },
  ],
}
`;

exports[`Integration: BodyParams any > should generate the right spec (any[]) 1`] = `
{
  "paths": {
    "/array/1": {
      "post": {
        "operationId": "testArrayBodyCtrlScenario",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "anyOf": [
                    {
                      "multipleOf": 1,
                      "type": "integer",
                    },
                    {
                      "type": "number",
                    },
                    {
                      "type": "string",
                    },
                    {
                      "type": "boolean",
                    },
                    {
                      "type": "array",
                    },
                    {
                      "type": "object",
                    },
                  ],
                  "nullable": true,
                },
                "type": "array",
              },
            },
          },
          "required": false,
        },
        "responses": {
          "200": {
            "description": "Success",
          },
        },
        "tags": [
          "TestArrayBodyCtrl",
        ],
      },
    },
    "/array/2": {
      "post": {
        "operationId": "testArrayBodyCtrlScenario2",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
              },
            },
          },
          "required": false,
        },
        "responses": {
          "200": {
            "description": "Success",
          },
        },
        "tags": [
          "TestArrayBodyCtrl",
        ],
      },
    },
    "/array/3": {
      "post": {
        "operationId": "testArrayBodyCtrlScenario3",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "multipleOf": 1,
                    "type": "integer",
                  },
                  {
                    "type": "number",
                  },
                  {
                    "type": "string",
                  },
                  {
                    "type": "boolean",
                  },
                  {
                    "type": "array",
                  },
                  {
                    "type": "object",
                  },
                ],
                "nullable": true,
              },
            },
          },
          "required": false,
        },
        "responses": {
          "200": {
            "description": "Success",
          },
        },
        "tags": [
          "TestArrayBodyCtrl",
        ],
      },
    },
  },
  "tags": [
    {
      "name": "TestArrayBodyCtrl",
    },
  ],
}
`;

exports[`Integration: BodyParams any > should generate the right spec (number[]) 1`] = `
{
  "paths": {
    "/array/1": {
      "post": {
        "operationId": "testArrayBodyCtrlScenario",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "number",
              },
            },
          },
          "required": false,
        },
        "responses": {
          "200": {
            "description": "Success",
          },
        },
        "tags": [
          "TestArrayBodyCtrl",
        ],
      },
    },
    "/array/2": {
      "post": {
        "operationId": "testArrayBodyCtrlScenario2",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "type": "number",
                },
                "type": "array",
              },
            },
          },
          "required": false,
        },
        "responses": {
          "200": {
            "description": "Success",
          },
        },
        "tags": [
          "TestArrayBodyCtrl",
        ],
      },
    },
    "/array/3": {
      "post": {
        "operationId": "testArrayBodyCtrlScenario3",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "multipleOf": 1,
                "type": "integer",
              },
            },
          },
          "required": false,
        },
        "responses": {
          "200": {
            "description": "Success",
          },
        },
        "tags": [
          "TestArrayBodyCtrl",
        ],
      },
    },
    "/array/4": {
      "post": {
        "operationId": "testArrayBodyCtrlScenario4",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "multipleOf": 1,
                  "type": "integer",
                },
                "type": "array",
              },
            },
          },
          "required": false,
        },
        "responses": {
          "200": {
            "description": "Success",
          },
        },
        "tags": [
          "TestArrayBodyCtrl",
        ],
      },
    },
  },
  "tags": [
    {
      "name": "TestArrayBodyCtrl",
    },
  ],
}
`;
