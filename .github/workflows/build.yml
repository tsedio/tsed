# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Build & Release

on:
  push:
  pull_request:
    branches: [production]
    types: [opened, synchronize, closed]

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install dependencies
        run: yarn install --frozen-lockfile --network-timeout 500000
      - name: Run lint
        run: yarn test:lint

  test:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node-version: [14.x, 16.x]
        exclude:
          #          - os: macos-latest
          #            node-version: 12.x
          - os: macos-latest
            node-version: 14.x
          #          - os: windows-latest
          #            node-version: 12.x
          - os: windows-latest
            node-version: 14.x

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install dependencies
        run: yarn install --frozen-lockfile --network-timeout 500000 --ignore-engines
      - name: Run test
        run: yarn test:global
      - name: Coveralls
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          flag-name: run-${{ matrix.test_number }}
          parallel: true

  test-packages:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install dependencies
        run: yarn install --frozen-lockfile --network-timeout 500000 --ignore-engines
      - name: Run test
        run: yarn test:packages

  coveralls:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Coveralls Finished
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          parallel-finished: true

  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install dependencies
        run: yarn install --frozen-lockfile --network-timeout 500000
      - name: Run build
        run: yarn build

  benchmarks:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install wrk
        run: sh .github/workflows/install-wrk.sh
      - name: Install dependencies
        run: yarn install --frozen-lockfile --network-timeout 500000
      - name: Run build
        run: yarn build
      - name: Run benchmarks
        run: yarn benchmarks
      - uses: actions/github-script@v4
        if: github.event_name == 'pull_request' && !github.event.pull_request.head.repo.fork
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            context.issue.number && github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: require('fs').readFileSync('./tools/benchmarks/dist/benchmarks.md', {encoding: 'utf8'})
            })
      - uses: actions/upload-artifact@v2
        with:
          name: benchmarks
          path: |
            tools/benchmarks/dist

  deploy-packages:
    runs-on: ubuntu-latest
    needs: [lint, test, test-packages, build]
    if: github.event_name != 'pull_request' && contains('
      refs/heads/production
      refs/heads/alpha
      refs/heads/beta
      refs/heads/rc
      ', github.ref)

    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install dependencies
        run: yarn install --frozen-lockfile --network-timeout 500000
      - name: Release packages
        env:
          CI: true
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        run: yarn release

  publish-docs:
    runs-on: ubuntu-latest
    needs: deploy-packages
    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - uses: actions/checkout@v2
        with:
          ref: "production"
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install dependencies
        run: yarn install --frozen-lockfile --network-timeout 500000
      - name: Build pages
        env:
          CI: true
        run: yarn api:build && yarn vuepress:docs:build
      - name: Publish pages
        env:
          CI: true
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: yarn docs:publish
#  publish-refs:
#    runs-on: ubuntu-latest
#    needs: deploy-packages
#    if: ${{ github.event_name != 'pull_request' && (contains(github.ref, 'production') || contains(github.ref, 'alpha')  || contains(github.ref, 'beta') || contains(github.ref, 'rc')) }}
#
#    strategy:
#      matrix:
#        node-version: [16.x]
#
#    steps:
#      - uses: actions/checkout@v2
#        with:
#          ref: "production"
#      - name: Use Node.js ${{ matrix.node-version }}
#        uses: actions/setup-node@v1
#        with:
#          node-version: ${{ matrix.node-version }}
#      - name: Install dependencies
#        run: yarn install --frozen-lockfile --network-timeout 500000
#      - name: Build pages
#        env:
#          CI: true
#        run: yarn api:build && yarn vuepress:ref:build
#      - name: Publish pages
#        env:
#          CI: true
#          GH_TOKEN: ${{ secrets.GH_TOKEN }}
#          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
#        run: yarn docs:publish
#  publish-examples:
#    runs-on: ubuntu-latest
#    needs: deploy-packages
#    if: ${{ github.event_name != 'pull_request' && (contains(github.ref, 'production') || contains(github.ref, 'alpha')  || contains(github.ref, 'beta') || contains(github.ref, 'rc')) }}
#
#    strategy:
#      matrix:
#        node-version: [ 16.x ]
#
#    steps:
#      - uses: actions/checkout@v2
#        with:
#          ref: 'production'
#      - name: Use Node.js ${{ matrix.node-version }}
#        uses: actions/setup-node@v1
#        with:
#          node-version: ${{ matrix.node-version }}
#      - name: Install dependencies
#        run: yarn install --frozen-lockfile
#      - name: Publish examples
#        env:
#          CI: true
#          GH_TOKEN: ${{ secrets.GH_TOKEN }}
#          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
#        run: yarn examples:publish

